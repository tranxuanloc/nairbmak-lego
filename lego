#!/usr/bin/php
<?php

const PAGE_TEMPLATE = "
import React from 'react';

const %%NAME%% = () =>
  <div className='main'>
    <h1>%%NAME%%</h1>
  </div>;

export default %%NAME%%;
";

const REDUX_ACTION_TEMPLATE = "
import * as types from './actionTypes';

export const %%ACTION%% = (data) => {
  return dispatch => {
    dispatch({ type: types.%%ACTION%%, data });
  };
};
";

const REDUX_REDUCER_TEMPLATE = "
import * as types from '../actions/actionTypes';

const defaultState = {};

export default (state = defaultState, action) => {
  switch (action.type) {
    case types.%%REDUCER%%:
      return { ...state, ...action.data };
    default:
      return state;
  }
};
";

$commands = ['loc', 'page', 'component', 'redux'];

$command = isset($argv[1]) ? $argv[1] : '';

$options = getopt("p:f:t:hv");

if(isset($options['h']) || !in_array($command, $commands)){
  echo "Utility Command for Lego project. Copyright by phongvh\n
Usage: php lego <loc|page|redux> <name>\n
  - loc: (without argument) calculate the LOC (Lines Of Code) of all js file in src folder
  - page: (require argument) create a new page with provided name
  - redux: (require argument) create a new action & reducer with provided name
  - (no sub command): display this help\n\n";
  exit;
}

$path_list = $list1 = $list2 = $file_type = array();

if($command === 'loc') {

  if(isset($options['p']) && $options['p']){
    $list1 = explode(',', $options['p']);
  }

  if(isset($options['f']) && $options['f']){
    $list2 = file($options['f'], FILE_IGNORE_NEW_LINES);
  }

  if(isset($options['t']) && $options['t']){
    $file_type = explode(',', $options['t']);
  }

  if(empty($file_type)) $file_type = ['js'];

  $path_list = array_merge($list1, $list2);

  if(empty($path_list)) $path_list = ['src'];

  //if(empty($path_list)) $path_list = array(__DIR__);

  $loc = 0;

  foreach($path_list as $item){
      $loc += count_loc($item, $file_type);
  }

  echo "===\nTotal Lines of ". strtoupper(implode(',',$file_type)) ." code from '" . implode(',',$path_list) . "': $loc\n";
} else if($command === 'page'){
  $name = isset($argv[2]) ? $argv[2] : '';
  if(!$name) echo "Error: Please provide a page name";
  else {
    file_put_contents("./src/views/pages/$name.js", TemplateEngine(PAGE_TEMPLATE, $name));
    echo "A new page created at ./src/views/pages/$name.js\n";
    echo "\nNEXT STEP:\n===
    Go to ./src/routes/index.js to register this page\n===";
  }
} else if($command === 'redux'){
  $name = isset($argv[2]) ? $argv[2] : '';
  if(!$name) echo "Error: Please provide a redux name";
  else {
    file_put_contents("./src/redux/actions/$name.action.js", TemplateEngine(REDUX_ACTION_TEMPLATE, strtoupper($name)));
    file_put_contents("./src/redux/reducers/$name.reducer.js", TemplateEngine(REDUX_REDUCER_TEMPLATE, strtoupper($name)));
    echo "A new action created at ./src/redux/actions/$name.action.js\n";
    echo "A new reducer created at ./src/redux/reducers/$name.reducer.js\n";
    echo "\nNEXT STEP:\n===
    Add new ACTION TYPE to ./src/redux/actions/actionTypes.js
    Add new REDUCER to ./src/redux/reducers/index.js\n===";
  }
}

function count_loc($path, $file_type, $verbose=true)
{
  $loc = 0;
  if(is_file($path)) {
    $loc = count(file($path));
    echo $path . ": $loc\n";
    return $loc;
  }
  
  if(!is_dir($path)) {
    echo "$path: Path not found\n";
    return 0;
  }
	
  $dir = new DirectoryIterator($path); 	
  
  foreach ( $dir as $node )
  {
    if ( $node->isDir() && !$node->isDot() )
    {
      $loc += count_loc( $node->getPathname(), $file_type, $verbose );
    }
    else if ( $node->isFile() )
    {
      if(empty($file_type) || in_array($node->getExtension(), $file_type)){
        $_loc = count(file($node->getPathname()));
        $loc += $_loc;
        if($verbose)
          echo $node->getPathname().": $_loc\n";
      }
    }
  }
  return $loc;
}

function TemplateEngine ($tpl, $data) {
  $re = '/%%([^%%]+)?%%/';
  return preg_replace($re, $data, $tpl);
}